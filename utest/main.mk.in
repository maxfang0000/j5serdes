##### VARIABLES FROM AUTOCONF
prefix := @prefix@

SRC_DIR := @srcdir@
BUILD_DIR := @abs_top_builddir@
VPATH := $(SRC_DIR)

OPT := @OPT@
DEBUG := @DEBUG@

##### VARIABLE INITIALIZATION

DEFINES  :=
INCLUDES :=
SOURCES  :=
OBJECTS  :=
DEPS     :=
LIBDIRS  :=
LIBS     := -lj5serdes -Wl,-rpath,@TARGET_LIB_DIR@

# --enable-new-dtags could be added if RPATH priority < LD_LIBRARY_PATH is
# preferred.

##### PROJECT SPECIFICS

SOURCES += \
  minitest.cc          \
  minitest-main.cc     \
  utest-infra.cc       \
  utest-json-object.cc \

INCLUDES += \
  -I@TARGET_INC_DIR@

LIBDIRS += \
  -L@TARGET_LIB_DIR@

MAIN_BIN := utest

##### FLAGS

STD := -std=c++17

COMMONFLAGS := $(DEFINES)
CPPFLAGS := $(COMMONFLAGS) $(INCLUDES) $(STD)
CCFLAGS  := $(COMMONFLAGS) $(INCLUDES) $(STD)
LDFLAGS  := $(COMMONFLAGS) $(LIBDIRS) $(LIBS)

##### TOOLS

CC := g++
LD := g++
INST := install

ifeq ($(shell uname -s),Darwin)
	CC := clang++
	LD := clang++
	INST := ginstall
endif

##### COMPILE RULES

C_SOURCES  := $(filter %.c,$(SOURCES))
CC_SOURCES := $(filter %.cc,$(SOURCES))

OBJECTS += $(patsubst %.c,%.o,$(C_SOURCES))
OBJECTS += $(patsubst %.cc,%.o,$(CC_SOURCES))

DEPS += $(patsubst %.o,%.d,$(OBJECTS))

.PHONY: all default clean

all: default

%.d: %.c
	@echo "... generating dependency file $@ from $<"
	@mkdir -p $(@D)
	@$(CC) -MM $(CPPFLAGS) -MF $@ -MT '$@ $(patsubst %.d,%.o,$@)' $< || (rm -rf $@ && false)

%.d: %.cc
	@echo "... generating dependency file $@ from $<"
	@mkdir -p $(@D)
	@$(CC) -MM $(CPPFLAGS) -MF $@ -MT '$@ $(patsubst %.d,%.o,$@)' $< || (rm -rf $@ && false)

%.o: %.c
	@echo "... compiling $<"
	@$(CC) $(CCFLAGS) -c $< -o $@

%.o: %.cc
	@echo "... compiling $<"
	@$(CC) $(CCFLAGS) -c $< -o $@

-include $(DEPS)

#####

default: $(MAIN_BIN)

$(MAIN_BIN): $(OBJECTS)
	@$(LD) $(OBJECTS) $(LDFLAGS) -o $@

clean:
	@rm -rf $(OBJECTS) $(DEPS) $(MAIN_BIN)

