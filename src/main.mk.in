include config.mk

##### VARIABLES FROM CONFIG

prefix := $(CFG_INSTALL_DIR)
incdir := $(CFG_INSTALL_INC_DIR)
bindir := $(CFG_INSTALL_BIN_DIR)
libdir := $(CFG_INSTALL_LIB_DIR)

SRC_DIR := $(CFG_SRC_DIR)
BUILD_DIR := $(CFG_BUILD_DIR)
VPATH := $(SRC_DIR)

OPT := $(CFG_OPT)
DEBUG := $(CFG_DEBUG)

##### VARIABLE INITIALIZATION

DEFINES                :=
INCLUDES               :=
SOURCES                :=
OBJECTS                :=
EXCLD_MAIN_SOURCES     :=
DEPS                   :=
LIBDIRS                :=
LIBS                   :=
FRAMEWORKS             :=
MTL_OBJECTS            :=
EXCLD_MAIN_MTL_SOURCES :=
MTL_LIBS               :=
INSTALL_INCS           :=
INSTALL_LIBS           :=
INSTALL_BINS           :=

INCLUDES += -I$(SRC_DIR)

################################# MODIFY HERE  #################################

##### PROJECT SPECIFICS

SOURCES += j5serdes.cc

MAIN_LIB := libj5serdes.so
MAIN_INC := j5serdes.h
MAIN_BIN :=

INSTALL_LIBS += $(MAIN_LIB)
INSTALL_INCS += $(MAIN_INC)
INSTALL_BINS += $(MAIN_BIN)

############################### END MODIFY HERE  ###############################

MAIN_LIB_NAME := $(basename $(patsubst lib%,%,$(MAIN_LIB)))
MAIN_LIB_RPATH := -Wl,-rpath,$(libdir)

##### SUBDIRS

SUBMKS := $(shell find . -type f -name subdir.mk)
include $(SUBMKS)

##### FLAGS

STD := -std=c++17

COMMONFLAGS := $(DEFINES)
CPPFLAGS    := $(COMMONFLAGS) $(INCLUDES) $(STD)
CCFLAGS     := $(COMMONFLAGS) $(INCLUDES) $(STD) $(OPT) -fPIC
LDFLAGS     := $(COMMONFLAGS) $(OPT) $(FRAMEWORKS) -fPIC
MTLCCFLAGS  := $(COMMONFLAGS)
MTLLDFLAGS  := $(COMMONFLAGS)

ifeq ($(DEBUG),1)
CCFLAGS += -g
LDFLAGS += -g
endif

##### TOOLS

CC := g++
LD := g++
INST := install

ifeq ($(shell uname -s),Darwin)
CC := clang++
LD := clang++
INST := ginstall
# GPU TOOLS
MTLCC := xcrun -sdk macosx metal
MTLLD := xcrun -sdk macosx metallib
endif

INST_CHECK := $(shell command -v $(INST) 2>/dev/null)
ifeq ($(INST_CHECK),)
$(error gnu install is not found under the name '$(INST)'. please install)
endif

##### COMPILE RULES

C_SOURCES   := $(filter %.c,$(SOURCES))
CC_SOURCES  := $(filter %.cc,$(SOURCES))
MTL_SOURCES := $(filter %.metal,$(SOURCES))

OBJECTS += $(patsubst %.c,%.o,$(C_SOURCES))
OBJECTS += $(patsubst %.cc,%.o,$(CC_SOURCES))

MTL_OBJECTS += $(patsubst %.metal,%.air,$(MTL_SOURCES))

DEPS += $(patsubst %.o,%.d,$(OBJECTS))

.PHONY: all default install do-install clean showsrcs

all: default

%.d: %.c
	@echo "... generating dependency file $@ from $(patsubst $(SRC_DIR)/%,%,$<)"
	@mkdir -p $(@D)
	@$(CC) -MM $(CPPFLAGS) -MF $@ -MT '$@ $(patsubst %.d,%.o,$@)' $< ||\
   (rm -rf $@ && false)

%.d: %.cc
	@echo "... generating dependency file $@ from $(patsubst $(SRC_DIR)/%,%,$<)"
	@mkdir -p $(@D)
	@$(CC) -MM $(CPPFLAGS) -MF $@ -MT '$@ $(patsubst %.d,%.o,$@)' $< ||\
   (rm -rf $@ && false)

%.o: %.c
	@echo "... compiling $(patsubst $(SRC_DIR)/%,%,$<)"
	@$(CC) $(CCFLAGS) -c $< -o $@

%.o: %.cc
	@echo "... compiling $(patsubst $(SRC_DIR)/%,%,$<)"
	@$(CC) $(CCFLAGS) -c $< -o $@

%.air: %.metal
	@echo "... compiling $(patsubst $(SRC_DIR)/%,%,$<)"
	@$(MTLCC) $(MTLCCFLAGS) -c $< -o $@

ifneq ($(MAKECMDGOALS),clean)
-include $(DEPS)
endif

##### INSTALL RULES

INC_INSTALL_DEST :=
LIB_INSTALL_DEST :=
BIN_INSTALL_DEST :=

define INST_INC
INC_INSTALL_DEST += $(1)/$(2)
$(1)/$(2): $(2)
	@echo "... installing $(2) to $(1)"
	@mkdir -p $(1)/$$(dir $(2))
	@$(INST) -m 644 -D $$< $$@
endef

define INST_LIB
LIB_INSTALL_DEST += $(1)/$$(notdir $(2))
$(1)/$$(notdir $(2)): $(2)
	@echo "... installing $(2) to $(1)"
	@$(INST) -m 755 -D $$< $$@
endef

define INST_BIN
BIN_INSTALL_DEST += $(1)/$$(notdir $(2))
$(1)/$$(notdir $(2)): $(2)
	@echo "... installing $(2) to $(1)"
	@$(INST) -m 755 -D $$< $$@
endef

$(foreach x,$(INSTALL_INCS),\
  $(eval $(call INST_INC,$(incdir),$(x))))

$(foreach x,$(INSTALL_LIBS),\
  $(eval $(call INST_LIB,$(libdir),$(x))))

$(foreach x,$(INSTALL_BINS),\
  $(eval $(call INST_BIN,$(bindir),$(x))))

##### TARGETS

default: install

install:
	@$(MAKE) -f main.mk do-install

do-install: $(INC_INSTALL_DEST) $(LIB_INSTALL_DEST) $(BIN_INSTALL_DEST)

clean:
	@rm -rf $(OBJECTS) $(DEPS) $(MAIN_LIB) $(MTL_OBJECTS) $(METAL_LIB)
	@echo "... all cleaned up"

$(incdir):
	@$(INST) -m 755 -d $@

$(libdir):
	@$(INST) -m 755 -d $@

$(bindir):
	@$(INST) -m 755 -d $@

##### MAIN TARGETS

MAIN_LIB_INST_NAME :=
ifeq ($(shell uname -s),Darwin)
MAIN_LIB_INST_NAME := -install_name @rpath/$(MAIN_LIB)
endif

EXCLD_MAIN_C_SOURCES   := $(filter %.c,$(EXCLD_MAIN_SOURCES))
EXCLD_MAIN_CC_SOURCES  := $(filter %.cc,$(EXCLD_MAIN_SOURCES))
EXCLD_MAIN_MTL_SOURCES := $(filter %.metal,$(EXCLD_MAIN_SOURCES))

EXCLD_MAIN_OBJECTS :=
EXCLD_MAIN_OBJECTS += $(patsubst %.c,%.o,$(EXCLD_MAIN_C_SOURCES))
EXCLD_MAIN_OBJECTS += $(patsubst %.cc,%.o,$(EXCLD_MAIN_CC_SOURCES))

EXCLD_MAIN_MTL_OBJECTS:
EXCLD_MAIN_MTL_OBJECTS += $(patsubst %.metal,%.air,$(EXCLD_MAIN_MTL_SOURCES))

MAIN_OBJECTS := $(filter-out $(EXCLD_MAIN_OBJECTS),$(OBJECTS))
$(MAIN_LIB): $(MAIN_OBJECTS)
	@echo "... linking $@"
	@$(LD) $(LDFLAGS) $(MAIN_LIB_INST_NAME) -shared $(OBJECTS) -o $@

MAIN_MTL_OBJECTS := $(filter-out $(EXCLD_MAIN_MTL_OBJECTS),$(MTL_OBJECTS))
$(METAL_LIB): $(MAIN_MTL_OBJECTS)
	@echo "... linking $@"
	@$(MTLLD) $(MTLLDFLAGS) $< -o $@

